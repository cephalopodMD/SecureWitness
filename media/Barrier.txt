class Barrier {

  int count, size;
  BS mutex, waitQ, throttle;

  Barrier(int size) {
    this.count = 0;
    this.size = size;
    mutex = BS(1);
    waitQ = BS(0);
    throttle = BS(0);
  }

  void wait() {
    mutex.wait();
    count++;
    if (count == size) {
      for (int i = 0; i < size - 1; i++) {
        waitQ.signal();   // Wake up a thread
        throttle.wait();  // Wait until the woken thread has signaled the throttle
      }
      count = 0;
      mutex.signal();
    } else {
      mutex.signal();     // Release the mutex before blocking
      waitQ.wait();       // Block on the waiting queue
      throttle.signal();  // Signal the throttle after the thread has awoken
    }
    return;
  }

}